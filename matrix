#Mia W. Jacobson
#CSX - 'Matrices'
#Description: This assignment performs automated matrix operations.
#Items 1-4 due: 11/12/24
#Items 5-6 due: 11/18/24
#Items 7-8 due: 12/3/24

import copy

class matrix:#creates class called 'matrix'
    def __init__(self, rows, cols):
        self.rows = rows
        self.cols = cols
        self.data = [[0 for _ in range(cols)] for _ in range(rows)]


    def print(self):#prints matrix
        for i in range(self.rows):
            for j in range(self.cols):
                print(self.data[i][j], end=" ")
            print()


    def plus(self, m1):#adds matrices
        
        ralph = matrix(3,3)
        
        ralph.data[0][0] = m1.data[0][0] + self.data[0][0]
        ralph.data[0][1] = m1.data[0][1] + self.data[0][1]
        ralph.data[0][2] = m1.data[0][2] + self.data[0][2]
        
        ralph.data[1][0] = m1.data[1][0] + self.data[1][0]
        ralph.data[1][1] = m1.data[1][1] + self.data[1][1]
        ralph.data[1][2] = m1.data[1][2] + self.data[1][2]
         
        ralph.data[2][0] = m1.data[2][0] + self.data[2][0]
        ralph.data[2][1] = m1.data[2][1] + self.data[2][1]
        ralph.data[2][2] = m1.data[2][2] + self.data[2][2]
        
        return ralph
    

    def times(self,m1):#multiplies matrices
        
        ralph = matrix(3,3)
    
        ralph.data[0][0] = (m1.data[0][0] * self.data[0][0]) + (m1.data[0][1] * self.data[1][0]) + (m1.data[0][2] * self.data[2][0])
        ralph.data[0][1] = (m1.data[0][0] * self.data[0][1]) + (m1.data[0][1] * self.data[1][1]) + (m1.data[0][2] * self.data[2][1])
        ralph.data[0][2] = (m1.data[0][0] * self.data[0][2]) + (m1.data[0][1] * self.data[1][2]) + (m1.data[0][2] * self.data[2][2])
        
        ralph.data[1][0] = (m1.data[1][0] * self.data[0][0]) + (m1.data[1][1] * self.data[1][0]) + (m1.data[1][2] * self.data[2][0])
        ralph.data[1][1] = (m1.data[1][0] * self.data[0][1]) + (m1.data[1][1] * self.data[1][1]) + (m1.data[1][2] * self.data[2][1])
        ralph.data[1][2] = (m1.data[1][0] * self.data[0][2]) + (m1.data[1][1] * self.data[1][2]) + (m1.data[1][2] * self.data[2][2])
         
        ralph.data[2][0] = (m1.data[2][0] * self.data[0][0]) + (m1.data[2][1] * self.data[1][0]) + (m1.data[2][2] * self.data[2][0])
        ralph.data[2][1] = (m1.data[2][0] * self.data[0][1]) + (m1.data[2][1] * self.data[1][1]) + (m1.data[2][2] * self.data[2][1])
        ralph.data[2][2] = (m1.data[2][0] * self.data[0][2]) + (m1.data[2][1] * self.data[1][2]) + (m1.data[2][2] * self.data[2][2])

        return ralph
    

    def scalarTimesRow(self, scalar, row):#multiplies row of a matrix by a number
        for i, cell in enumerate(self.data[row]):
            self.data[row][int(i)] = cell * scalar

  
    def MatrixswitchRows(self, row):#switches two rows in  a matrix
        row = row.split(",")
        r1 = int(row[0])
        r2 = int(row[1])
        self.data[r1], self.data[r2] =  self.data[r2], self.data[r1]


    def MatrixlinearCombRows(self, row):#adds a scalar multiple of one row to another row
        row = row.split (",")
        r1 = float(row[0])
        r2 = int(row[1])
        r3 = int(row[2])
        
        for i, _ in enumerate(self.data[r3]):
            self.data[r3][i] += r1*self.data[r2][i]

   

    def Matrix_determinant(self):
        
        a, b, c = self.data[0][:3]
        d, e, f = self.data[1][:3]
        g, h, i = self.data[2][:3]
        return a*((e*i)-(f*h)) - b*((d*i)-(f*g)) + c*((d*h)-(e*g))



    def Matrix_invert(self):

        if self.Matrix_determinant() == 0:
            print ("Determinant equals zero. Please enter a valid matrix.")
            return "kill"
    
        if self.data[0][0] == 0:#finding 0,0
            if self.data[1][0] == 0:
                self.MatrixswitchRows("0,2")        
            else:
                self.MatrixswitchRows("0,1")
        else:#r1/([0][0])
            a = copy.deepcopy(self.data[0][0])
            for i, cell in enumerate(self.data[0]):
                self.data[0][i] = cell / a


        if self.data[1][0] == 0:#finding 1,0
            pass
        else:#r2 = r2 + (-1*([1][0])*r1)
            added_list = []
            for i, cell in enumerate(self.data[0]):
                added_list += [cell * (-1 * self.data[1][0])]
        
            for i, cell in enumerate(self.data[1]):
                self.data[1][i] = cell + added_list[i]
        
    
        if self.data[1][1] == 1:#finding 1,1
            pass
        else:#r2 = r2/([1][1])
            a = copy.deepcopy(self.data[1][1])
            for i, cell in enumerate(self.data[1]):
                self.data[1][i] = cell / a
        

        if self.data[2][0] == 0:#finding 2,0
            pass
        else:#r3 = r3 + (-1*[2][0]*r1)
            added_list = []
            for i, cell in enumerate(self.data[0]):
                added_list += [cell * (-1 * self.data[2][0])]
        
            for i, cell in enumerate(self.data[2]):
                self.data[2][i] = cell + added_list[i]
        
    

        if self.data[2][1] == 0:#finding 2,1
            pass
        else:#r3 = r3 + (-1*[2][1]*r2)
            added_list = []
            for i, cell in enumerate(self.data[1]):
                added_list += [cell * (-1 * self.data[2][1])]
        
            for i, cell in enumerate(self.data[2]):
                self.data[2][i] = cell + added_list[i]
        
        

        if self.data[2][2] == 1:#finding 2,2
            pass
        else:#r3 = r3/([2][2])
            a = copy.deepcopy(self.data[2][2])
            for i, cell in enumerate(self.data[2]):
                self.data[2][i] = cell / a
        

        if self.data[1][2] == 0:#finding 1,2
            pass
        else:#r2 = r2 + (r3*-1*[1][2])
            added_list = []
            for i, cell in enumerate(self.data[2]):
                added_list += [cell * (-1 * self.data[1][2])]
        
            for i, cell in enumerate(self.data[1]):
                self.data[1][i] = cell + added_list[i]
        
        

        if self.data[0][2] == 0:#finding 0,2
            pass
        else:#r1 = r1 + (r3*-1*[0][2])
            added_list = []
            for i, cell in enumerate(self.data[2]):
                added_list += [cell * (-1 * self.data[0][2])]
        
            for i, cell in enumerate(self.data[0]):
                self.data[0][i] = cell + added_list[i]


        if self.data[0][1] == 0:#finding 0,1
            pass
        else:#r1 = r1 + (r3*-1*[0][1])
            added_list = []
            for i, cell in enumerate(self.data[1]):
                added_list += [cell * (-1 * self.data[0][1])]
        
            for i, cell in enumerate(self.data[0]):
                self.data[0][i] = cell + added_list[i]
        
        

        
if __name__ == "__main__":

    random_plus_identity = matrix(3,6)#matrix used by inverse and rref and determinant functions 
    random_plus_identity.data = [[1,2,3,1,0,0],
                                 [4,5,6,0,1,0],
                                 [7,8,9,0,0,1]]

    alice = matrix(3,3)
    alice.data = [[0,0,0],
                  [1,1,1],
                  [2,2,2]]
    

    trixie = matrix(3,3)
    trixie.data = [[0,0,0],
                  [1,1,1],
                  [2,2,2]]
    

    
    while True:#creates infinity loop for menu below  
        print("Menu: Enter Choice or 'Q' to (Q)uit:")
        print("1) Print Matrices")
        print("2) Add matrices")
        print("3) Multiply Matrices")
        print("4) Multiply row by scalar")
        print("5) Switch two rows in a matrix")
        print("6) Add scalar multiple of one row to another")
        print("7) Find RREF of matrix")
        print("8) Invert Matrix")
        print("9) Find Determinant")

        


        select = input("")    #menu for inputs             

        if select == '1':
            print("alice: ")
            alice.print()
            print('')
            print("trixie: ")
            trixie.print()
        
        if select == '2':
            ralph = trixie.plus(alice)
            print("sum of matrices: ")
            print('')
            ralph.print()

        if select == '3':
            ralph = trixie.times(alice)
            print("product of matrices: ")
            print('')
            ralph.print()
        

        if select == '4':
            choose = input("multiply scalar times a row in trixie or alice? (t or a)")

            scalar = float(input("enter a scalar: "))
            row = int(input("enter a row number (0-2): "))
           
            if choose == "t":
                trixie.scalarTimesRow(scalar, row)
                trixie.print()

            elif choose == "a":
               alice.scalarTimesRow(scalar, row)
               alice.print()
               
            

        if select == '5':

            choose = input("switch two rows in trixie or alice? (t or a)")
            row = input("enter a two row numbers (0-2) that you would like to switch, separated by a comma: ")
 
            if choose == "t":
                trixie.MatrixswitchRows(row)
                trixie.print()

            elif choose == "a":
                alice.MatrixswitchRows(row)
                alice.print()


        if select == '6':
            choose = input("add scalar multiple of one row to another within trixie or alice? (t or a)")
            row = input("enter a scalar, the row you want to multiply it by (0-2), and the row you want to add it to(0-2), separated by a comma: ")

            if choose == "t":
                trixie.MatrixlinearCombRows(row)
                trixie.print()

            elif choose == "a":
                alice.MatrixlinearCombRows(row)
                alice.print()
        

        if select == '7':
            if random_plus_identity.Matrix_invert() != "kill":
            
                right_side_final_inverted = []
            
                for row in random_plus_identity.data:
                    right_side_final_inverted += [row[:3]]

                for i in right_side_final_inverted:
                    print(" ".join([str(j) for j in i]))


        if select == '8':
            if random_plus_identity.Matrix_invert() != "kill":
            
                right_side_final_inverted = []
            
                for row in random_plus_identity.data:
                    right_side_final_inverted += [row[3:]]

                for i in right_side_final_inverted:
                    print(" ".join([str(j) for j in i]))

        
        if select == '9':
            print(random_plus_identity.Matrix_determinant())



        if select == 'Q':
                print("bye!")
                break
